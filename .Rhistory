#Perform temporal differential gene expression analysis
TS_object<-temporal_DE_wrapper(TS_object)
#Extract genes for PART clustering based on defined log(2)foldChange threshold
signi_genes<-select_genes_with_l2fc(TS_object,PART_l2fc_thresh)
source('R/object.R') #Load function to create timeseries object
#Set-up time series object parameters
diff_exp_type<-'DESeq2' #package used for DE – can also be 'limma'
p_val_filter_type<-'padj' #Either padj or pvalue, used to filter for significance
p_thresh<-0.05 #pvalue or padj value threshold for significance
l2fc_thresh<-2 #log(2)foldChange threshold for significance
name_control<-'IgM' #Name of experiment as seen in the sample file
name_experiment<-'LPS' #Name of control as seen in the sample file
graphic_vector<-c("#e31a1c","#1f78b4") #Pre-set colors for the groups
my_org_gpro='hsapiens' #Set the species for the gprofiler analysis
my_group_names<-c(name_experiment,name_control)
names(graphic_vector)<-c(name_experiment,name_control)
PART_l2fc_thresh<-2 #log(2)foldChange threshold for PART clustering
PART_min_clust<-30 #Minimum cluster size for PART
PART_recursion<-10 #Number of recursions, default is 100, using 10 for example
#Path to count data and sample data respectively
my_path_data<-'data/AID_TS/raw_counts_TS'
my_path_sample_dta<-'data/AID_TS/sample_file.csv'
TS_object <- new('TimeSeries_Object',sample_data=prep_sample_data(my_path_sample_dta,my_group_names),
group_names=my_group_names,group_colors=graphic_vector,DE_method=diff_exp_type,
DE_p_filter=p_val_filter_type,DE_p_thresh=p_thresh,DE_l2fc_thresh=l2fc_thresh,
Gpro_org=my_org_gpro)
TS_object <- create_raw_count_matrix(TS_object,my_path_data)
source('R/differential_expression.R') #Load differential gene expression functions
#Perform normalization if the DESeq2 tool is being used
if (TS_object@DE_method=='DESeq2'){
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
}
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)
#Perform temporal differential gene expression analysis
TS_object<-temporal_DE_wrapper(TS_object)
#Extract genes for PART clustering based on defined log(2)foldChange threshold
signi_genes<-select_genes_with_l2fc(TS_object,PART_l2fc_thresh)
print(paste0(length(signi_genes)), 'genes will be inputed for PART clustering')
length(signi_genes)
print(paste0(length(signi_genes), 'genes will be inputed for PART clustering'))
print(paste0(length(signi_genes), ' genes will be inputed for PART clustering'))
source('R/differential_expression.R') #Load differential gene expression functions
#Perform normalization if the DESeq2 tool is being used
if (TS_object@DE_method=='DESeq2'){
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
}
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)
#Perform temporal differential gene expression analysis
TS_object<-temporal_DE_wrapper(TS_object)
source('R/differential_expression.R') #Load differential gene expression functions
#Perform normalization if the DESeq2 tool is being used
if (TS_object@DE_method=='DESeq2'){
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
}
TS_object <- new('TimeSeries_Object',sample_data=prep_sample_data(my_path_sample_dta,my_group_names),
group_names=my_group_names,group_colors=graphic_vector,DE_method=diff_exp_type,
DE_p_filter=p_val_filter_type,DE_p_thresh=p_thresh,DE_l2fc_thresh=l2fc_thresh,
Gpro_org=my_org_gpro)
TS_object <- create_raw_count_matrix(TS_object,my_path_data)
source('R/differential_expression.R') #Load differential gene expression functions
#Perform normalization if the DESeq2 tool is being used
if (TS_object@DE_method=='DESeq2'){
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
}
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)
#Perform temporal differential gene expression analysis
TS_object<-temporal_DE_wrapper(TS_object)
#Extract genes for PART clustering based on defined log(2)foldChange threshold
signi_genes<-select_genes_with_l2fc(TS_object,PART_l2fc_thresh)
print(paste0(length(signi_genes), ' genes will be inputed for PART clustering'))
source('R/PART.R') #Load the functions needed for PART clustering
#Use all samples, but implement a custom order. In this case it is reversed
samps_2<-TS_object@sample_data$sample[TS_object@sample_data$group==TS_object@group_names[2]]
samps_1<-TS_object@sample_data$sample[TS_object@sample_data$group==TS_object@group_names[1]]
#Create the matrix that will be used for PART clustering
TS_object<-prep_counts_for_PART(object=TS_object,target_genes=signi_genes,
scale=T,target_samples=c(samps_2,samps_1))
#Initiate PART clustering with a pre-defined seed – 123456
message('computing PART clusters')
TS_object<-compute_PART(TS_object,part_recursion=PART_recursion,part_min_clust=PART_min_clust,
dist_param="euclidean", hclust_param="average",
custom_seed=123456)
#Save the TimeSeries object to the directory to prevent loss of data in the event
#of a downstream error
save(TS_object,file='timeseries_obj_res.Rdata')
# load('timeseries_obj_res.Rdata')
message('running Gprofiler on PART clusters')
TS_object<-run_gprofiler_PART_clusters(TS_object) #Run the gprofiler analysis
#Save the results in a Rdata obbject
save(TS_object,file='timeseries_obj_res.Rdata')
#Set the working directory
setwd("~/A_Projects/EpiGen/R_Work_Folder/TS_dev_zone")
#Load functions to illustrate Differential expression and PART cluster results
source('R/DE_PART_results_functions.R')
#Load class and function to naviguate the TimeSeries object
source('R/object.R')
#Load the TimeSeries object
load(file = 'timeseries_obj_res.Rdata')
#Create main directory for results
dir.create('TS_results')
#Create results for conditional and temporal differential gene expression results
plot_wrapper_DE_results(object=TS_object,DE_type='conditional',genes_of_interest=genes_of_interest,results_folder='TS_results/')
#Create results for conditional and temporal differential gene expression results
plot_wrapper_DE_results(object=TS_object,DE_type='conditional',genes_of_interest=genes_of_interest,results_folder='TS_results/')
#Define the genes of interest
genes_of_interest <- c('AICDA','APOBEC3H','APOBEC3F','APOBEC3D','APOBEC3C','APOBEC3G','APOBEC3B','APOBEC3A','SMUG1','UNG','EGFR')
create_tables_genes_of_interest_DE(TS_object,genes_of_interest,save_location='TS_results/genes_of_interest/',log_tp = log_tp_traj)
#Create the repository for genes_of_interest and perform the analysis
dir.create('TS_results/genes_of_interest/')
#Define the genes of interest
genes_of_interest <- c('AICDA','APOBEC3H','APOBEC3F','APOBEC3D','APOBEC3C','APOBEC3G','APOBEC3B','APOBEC3A','SMUG1','UNG','EGFR')
#Create results for conditional and temporal differential gene expression results
plot_wrapper_DE_results(object=TS_object,DE_type='conditional',genes_of_interest=genes_of_interest,results_folder='TS_results/')
plot_wrapper_DE_results(object=TS_object,DE_type='temporal',genes_of_interest=genes_of_interest,results_folder='TS_results/')
#Create the repository for genes_of_interest and perform the analysis
dir.create('TS_results/genes_of_interest/')
create_tables_genes_of_interest_DE(TS_object,genes_of_interest,save_location='TS_results/genes_of_interest/',log_tp = log_tp_traj)
#Define the genes of interest
genes_of_interest <- c('AICDA','APOBEC3H','APOBEC3F','APOBEC3D','APOBEC3C','APOBEC3G','APOBEC3B','APOBEC3A','SMUG1','UNG','EGFR')
log_tp_traj<-F #Defines if timepoints should be log transformed for illustration purposes
#Create results for conditional and temporal differential gene expression results
plot_wrapper_DE_results(object=TS_object,DE_type='conditional',genes_of_interest=genes_of_interest,results_folder='TS_results/')
plot_wrapper_DE_results(object=TS_object,DE_type='temporal',genes_of_interest=genes_of_interest,results_folder='TS_results/')
#Create the repository for genes_of_interest and perform the analysis
dir.create('TS_results/genes_of_interest/')
create_tables_genes_of_interest_DE(TS_object,genes_of_interest,save_location='TS_results/genes_of_interest/',log_tp = log_tp_traj)
#Calcualte and plot the TimeSeries PCA
TS_pca<-plot_PCA_TS(TS_object,DE_type='all')
ggsave("TS_results/PCA_plot.png",dpi=300,width=21, height=19, units='cm',plot=TS_pca)
#Define the genes of interest
genes_of_interest <- c('AICDA','APOBEC3H','APOBEC3F','APOBEC3D','APOBEC3C','APOBEC3G','APOBEC3B','APOBEC3A','SMUG1','UNG','EGFR')
log_tp_traj<-F #Defines if timepoints should be log transformed for illustration purposes
#Create results for conditional and temporal differential gene expression results
plot_wrapper_DE_results(object=TS_object,DE_type='conditional',genes_of_interest=genes_of_interest,results_folder='TS_results/')
plot_wrapper_DE_results(object=TS_object,DE_type='temporal',genes_of_interest=genes_of_interest,results_folder='TS_results/')
#Create the repository for genes_of_interest and perform the analysis
dir.create('TS_results/genes_of_interest/')
create_tables_genes_of_interest_DE(TS_object,genes_of_interest,save_location='TS_results/genes_of_interest/',log_tp = log_tp_traj)
#Calcualte and plot the TimeSeries PCA
TS_pca<-plot_PCA_TS(TS_object,DE_type='all')
ggsave("TS_results/PCA_plot.png",dpi=300,width=21, height=19, units='cm',plot=TS_pca)
dir.create('TS_results/PART_results') #create the directory to store results
PART_heat_map(TS_object,'TS_results/PART_results/PART_heat') #Create a summary heatmap
my_ts_data<-calculate_cluster_traj_data(TS_object,scale_feat=T) #Calculate scaled gene values for genes of clusters
my_mean_ts_data<-calculate_mean_cluster_traj(my_ts_data) #Calculate the mean scaled values for each cluster
#Function which determines the number of SVG files to plot all cluster trajectories
#Plots WILL BE SHOWN IN R MARKDOWN
wrapper_cluster_trajectory(TS_object,my_ts_data,my_mean_ts_data,log_TP=log_tp_traj,plot_name='TS_results/PART_results/Ctraj')
source('R/MDS_GO_results_functions.R') #Load the necessary functions
#Define specimen and ontology parameters
library("org.Hs.eg.db")
my_org_sem_sim='org.Hs.eg.db'
my_ont_gpro='GO:BP'
my_ont_sem_sim='BP'
#Create standard gprofiler results
GO_clusters<-gprofiler_cluster_analysis(TS_object,my_ont_gpro,save_path = 'TS_results/')
#Create semantic data
sem_data <- godata(my_org_sem_sim, ont=my_ont_sem_sim, computeIC=TRUE)
#Plot and save MDS and clustered MDS
wrapper_MDS_and_MDS_clusters(GO_clusters,sem_data,my_ont_sem_sim)
target_top=10
TS_res_location<-'TS_results/'
target_ontology<-'GO:BP'
GO_dotplot_wrapper(TS_res_location,target_ontology,target_top)
target_ontology<-'REAC'
GO_dotplot_wrapper(TS_res_location,target_ontology,target_top)
target_ontology<-'KEGG'
GO_dotplot_wrapper(TS_res_location,target_ontology,target_top)
#Dotplot for terms relating to specific ancestors
#All GOs relating to immune system process
target_ancestors<-c('GO:0002253','GO:0019882','GO:0002404','GO:0002339','GO:0042386',
'GO:0035172','GO:0002252','GO:0006955','GO:0002520','GO:0090713',
'GO:0045321','GO:0001776','GO:0050900','GO:0031294','GO:0002262',
'GO:0002683','GO:0002684','GO:0002440','GO:0002682','GO:0002200',
'GO:0045058','GO:0002507')
GOs_ancestors_clust<-find_relation_to_ancestors(target_ancestors,GO_clusters,ontology = 'BP')
wrapper_ancestor_curation_plots(GOs_ancestors_clust,sem_data)
# NOTE: This script can be run from the CLI using the below command
# Rscript -e "rmarkdown::render('rmarkdown_method/TS_analysis.Rmd',output_file='TS_analysis.html')"
library(knitr)
library(TimeSeriesAnalysis)
library(SummarizedExperiment)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
#COMMENT OUT IF NOT USING EXAMPLES
# write_example_data_to_dir('PBMC')
#Give names to saved object and name of results repository
name_result_folder<-'TS_results_Covid/'
obj_name<-'timeSeries_obj_cov.Rdata'
#Path to count data and sample data respectively
my_path_data<-'~/A_Projects/EpiGen/R_Work_Folder/TimeSeriesAnalysis/data/TS_covid/processed_adjusted_cov_dta.rds'
my_path_sample_dta<-'~/A_Projects/EpiGen/R_Work_Folder/TimeSeriesAnalysis/data/TS_covid/sample_file_adjusted_w_healthy.csv'
#Set-up time series object parameters
diff_exp_type<-'limma' #package used for DE – can also be 'limma'
p_val_filter_type<-'pvalue' #Either padj or pvalue, used to filter for significance
p_thresh<-0.05 #pvalue or padj value threshold for significance
l2fc_thresh<-1 #log(2)foldChange threshold for significance
name_control<-'Non.critical' #Name of experiment as seen in the sample file
name_experiment<-'Critical' #Name of control as seen in the sample file
graphic_vector<-c("#e31a1c","#1f78b4") #Pre-set colors for the groups
#Declare organism and load library
org_sem_sim='org.Hs.eg.db'
library('org.Hs.eg.db')
#Define specimen and ontology parameters
my_ont_gpro='GO:BP'
my_ont_sem_sim='BP'
#mmusculus
#hsapiens
#celegans
my_org_gpro='hsapiens' #Set the species for the gprofiler analysis
# The seed serves to create reproducible results with PART.
# A seed will ensure that the random components of PART clustering will be the same
# as long as the same seed is used. For more information on seeds, please consult
# this link: https://www.r-bloggers.com/2018/07/%F0%9F%8C%B1-setting-a-seed-in-r-when-using-parallel-simulation/
PART_seed=123456
PART_l2fc<-2 #log(2)foldChange threshold for PART clustering
PART_min_clust<-50 #Minimum cluster size for PART
PART_recursion<-100 #Number of recursions, default is 100, using 10 for example
log_tp_traj<-FALSE #Defines if timepoints should be log transformed for illustration purposes
# Allows for all temporal combinations to be done instead
# of just sequential comparison. ex: do TP2vsTP1, TP3vsTP2, AND TP3vsTP1. In a normal instance
# only the first two comparison of the example would be run.
do_all_temporal_comparisons=FALSE
#Used to highlight specific genes regardless of differential gene expression significance
genes_of_interest <- c('AICDA','APOBEC3H','APOBEC3F','APOBEC3D','APOBEC3C','APOBEC3G','APOBEC3B','APOBEC3A','SMUG1','UNG','EGFR')
#The ancestors that will be queried, the ontology must be specified (BP,MF,or CC)
#Set to an empty vector c() if not required by the analysis
target_ancestors<-c('GO:0002253','GO:0019882','GO:0002404','GO:0002339','GO:0042386',
'GO:0035172','GO:0002252','GO:0006955','GO:0002520','GO:0090713',
'GO:0045321','GO:0001776','GO:0050900','GO:0031294','GO:0002262',
'GO:0002683','GO:0002684','GO:0002440','GO:0002682','GO:0002200',
'GO:0045058','GO:0002507')
ancestor_ontology<-'BP'
#Some extra set-up
name_save_obj<-paste0(name_result_folder,obj_name)#The object will be saved in result folder
#Create main directory for results
dir.create(name_result_folder)
my_group_names<-c(name_experiment,name_control)
names(graphic_vector)<-c(name_experiment,name_control)
if(obj_name %in% list.files(name_result_folder)==FALSE){
TS_object <- new('TimeSeries_Object',
group_names=my_group_names,group_colors=graphic_vector,DE_method=diff_exp_type,
DE_p_filter=p_val_filter_type,DE_p_thresh=p_thresh,DE_l2fc_thresh=l2fc_thresh,
PART_l2fc_thresh=PART_l2fc,sem_sim_org=org_sem_sim,Gpro_org=my_org_gpro)
# TS_object <- TS_load_example_data(TS_object,'PBMC')
TS_object <- add_experiment_data(TS_object,sample_dta_path=my_path_sample_dta,count_dta_path=my_path_data)
TS_object <- add_semantic_similarity_data(TS_object,my_ont_sem_sim)
}else{
load(name_save_obj)
}
#Perform normalization if the DESeq2 tool is being used and if normalized matrix doesn't exist
if (slot(TS_object,'DE_method')=='DESeq2' & 'norm' %in% names(assays(slot(TS_object,'exp_data')))!=TRUE){
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
}
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)
#Perform temporal differential gene expression analysis
TS_object<-temporal_DE_wrapper(TS_object,do_all_combinations=do_all_temporal_comparisons)
TS_object@DE_results$conditional
# NOTE: This script can be run from the CLI using the below command
# Rscript -e "rmarkdown::render('rmarkdown_method/TS_analysis.Rmd',output_file='TS_analysis.html')"
library(knitr)
library(TimeSeriesAnalysis)
library(SummarizedExperiment)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
#COMMENT OUT IF NOT USING EXAMPLES
write_example_data_to_dir('CELEGANS')
#Give names to saved object and name of results repository
name_result_folder<-'TS_results_celegans_example/'
obj_name<-'timeSeries_obj_celegans_example.Rdata'
#Path to count data and sample data respectively
#Not needed if using example data
my_path_data<-'data/celegans/raw_counts_TS'
my_path_sample_dta<-'data/celegans/sample_file.csv'
#Set-up time series object parameters
diff_exp_type<-'DESeq2' #package used for DE – can also be 'limma'
p_val_filter_type<-'padj' #Either padj or pvalue, used to filter for significance
p_thresh<-0.05 #pvalue or padj value threshold for significance
l2fc_thresh<-1 #log(2)foldChange threshold for significance
name_control<-'BY273.ctrl' #Name of experiment as seen in the sample file
name_experiment<-'BY273.krill' #Name of control as seen in the sample file
graphic_vector<-c("#e31a1c","#1f78b4") #Pre-set colors for the groups
#Declare organism and load library
org_sem_sim='org.Ce.eg.db'
library('org.Ce.eg.db')
#Define specimen and ontology parameters
my_ont_gpro='GO:BP'
my_ont_sem_sim='BP'
#mmusculus
#hsapiens
#celegans
my_org_gpro='celegans' #Set the species for the gprofiler analysis
# The seed serves to create reproducible results with PART.
# A seed will ensure that the random components of PART clustering will be the same
# as long as the same seed is used. For more information on seeds, please consult
# this link: https://www.r-bloggers.com/2018/07/%F0%9F%8C%B1-setting-a-seed-in-r-when-using-parallel-simulation/
PART_seed=123456
PART_l2fc<-2 #log(2)foldChange threshold for PART clustering
PART_min_clust<-50 #Minimum cluster size for PART
PART_recursion<-100 #Number of recursions, default is 100, using 10 for example
log_tp_traj<-TRUE #Defines if timepoints should be log transformed for illustration purposes
# Allows for all temporal combinations to be done instead
# of just sequential comparison. ex: do TP2vsTP1, TP3vsTP2, AND TP3vsTP1. In a normal instance
# only the first two comparison of the example would be run.
do_all_temporal_comparisons=FALSE
#Used to highlight specific genes regardless of differential gene expression significance
genes_of_interest<-c('WBGene00016343','WBGene00010964','WBGene00001975','WBGene00002178','WBGene00018700','WBGene00010961',
'WBGene00001177','WBGene00006750','WBGene00004804')
#The ancestors that will be queried, the ontology must be specified (BP,MF,or CC)
#Set to an empty vector c() if not required by the analysis
target_ancestors<-c('GO:0002253','GO:0019882','GO:0002404','GO:0002339','GO:0042386',
'GO:0035172','GO:0002252','GO:0006955','GO:0002520','GO:0090713',
'GO:0045321','GO:0001776','GO:0050900','GO:0031294','GO:0002262',
'GO:0002683','GO:0002684','GO:0002440','GO:0002682','GO:0002200',
'GO:0045058','GO:0002507')
ancestor_ontology<-'BP'
#Some extra set-up
name_save_obj<-paste0(name_result_folder,obj_name)#The object will be saved in result folder
#Create main directory for results
dir.create(name_result_folder)
my_group_names<-c(name_experiment,name_control)
names(graphic_vector)<-c(name_experiment,name_control)
if(obj_name %in% list.files(name_result_folder)==FALSE){
TS_object <- new('TimeSeries_Object',
group_names=my_group_names,group_colors=graphic_vector,DE_method=diff_exp_type,
DE_p_filter=p_val_filter_type,DE_p_thresh=p_thresh,DE_l2fc_thresh=l2fc_thresh,
PART_l2fc_thresh=PART_l2fc,sem_sim_org=org_sem_sim,Gpro_org=my_org_gpro)
# TS_object <- TS_load_example_data(TS_object,'PBMC')
TS_object <- add_experiment_data(TS_object,sample_dta_path=my_path_sample_dta,count_dta_path=my_path_data)
TS_object <- add_semantic_similarity_data(TS_object,my_ont_sem_sim)
}else{
load(name_save_obj)
}
#Perform normalization if the DESeq2 tool is being used and if normalized matrix doesn't exist
if (slot(TS_object,'DE_method')=='DESeq2' & 'norm' %in% names(assays(slot(TS_object,'exp_data')))!=TRUE){
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
}
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)
#Perform temporal differential gene expression analysis
TS_object<-temporal_DE_wrapper(TS_object,do_all_combinations=do_all_temporal_comparisons)
#save the timeseries object
save(TS_object,file=name_save_obj)
TS_pca<-plot_PCA_TS(TS_object,DE_type='all')
ggsave(paste0(name_result_folder,"PCA_plot.png"),dpi=300,width=21, height=19, units='cm',plot=TS_pca)
library(gprofiler2)
sessionInfo()
getwd()
setwd('~/A_Projects/BiGR/CC_vel/')
setwd('~/A_Projects/EpiGen/R_Work_Folder/TiSA_results/result_not_example/AkerBioMarine_request/')
setwd('~/A_Projects/EpiGen/R_Work_Folder/TiSA_results/result_not_example/AkerBioMarine_request/')
for(item in list.files('Annotation_files/')){
print(item)
}
setdiff(list.files('Annotation_files/'), list.dirs(recursive = FALSE, full.names = FALSE))
all.files <- list.files('Annotation_files/',rec=F)
all.files[!file.info(all.files)$isdir]
for(item in list.files('Annotation_files/')){
if(item=="OrthoList_files"){
next
}
print(item)
}
annot_file<-read.csv(paste0('Annotation_files/',item))
for(item in list.files('Annotation_files/')){
if(item=="OrthoList_files"){
next
}
annot_file<-read.csv(paste0('Annotation_files/',item))
}
View(annot_file)
for(item in list.files('Annotation_files/')){
if(item=="OrthoList_files"){
next
}
annot_file<-read.csv(paste0('Annotation_files/',item))
ortho_name<-gsub(x = item,pattern = 'annotation',replacement = 'orthoList')
ortho_file<-read.csv(paste0('Annotation_files/OrthoList_files',ortho_name))
}
ortho_file<-read.csv(paste0('Annotation_files/OrthoList_files/',ortho_name))
for(item in list.files('Annotation_files/')){
if(item=="OrthoList_files"){
next
}
annot_file<-read.csv(paste0('Annotation_files/',item))
ortho_name<-gsub(x = item,pattern = 'annotation',replacement = 'orthoList')
ortho_file<-read.csv(paste0('Annotation_files/OrthoList_files/',ortho_name))
}
test_annot<-annot_file
test_ortho<-ortho_file
colnames(test_annot)
colnames(test_ortho)
View(ortho_file)
print(unique(ortho_file$X))
colnames(test_ortho)<-c('WB_ID','Common_Name','Locus_ID','Ensembl_ID','HGNC_Symbol','No_of_Databases','Matched_Databases','Ahringer_location','rem')
test_ortho<-test_ortho[,c('WB_ID','Common_Name','Locus_ID','Ensembl_ID','HGNC_Symbol','No_of_Databases','Matched_Databases','Ahringer_location')]
View(merge(test_annot,test_ortho,by='WB_ID'))
colnames(test_annot)
test_annot<-annot_file
test_ortho<-ortho_file
colnames(test_annot)<-c('WB_ID','Annot_cluster','Annot_SYMBOLS','Annot_GENENAME')
colnames(test_ortho)<-c('WB_ID','Ortho_Common_Name','Ortho_Locus_ID','Ortho_Ensembl_ID',
'Ortho_HGNC_Symbol','Ortho_No_of_Databases','Ortho_Matched_Databases',
'Ortho_Ahringer_location','rem')
test_ortho<-test_ortho[,c('WB_ID','Ortho_Common_Name','Ortho_Locus_ID','Ortho_Ensembl_ID',
'Ortho_HGNC_Symbol','Ortho_No_of_Databases','Ortho_Matched_Databases',
'Ortho_Ahringer_location')]
View(merge(test_annot,test_ortho,by='WB_ID'))
setwd('~/A_Projects/BiGR/CC_vel/')
setwd('~/A_Projects/EpiGen/R_Work_Folder/TiSA_results/result_not_example/AkerBioMarine_request/')
for(item in list.files('Annotation_files/')){
if(item=="OrthoList_files"){
next
}
annot_file<-read.csv(paste0('Annotation_files/',item))
ortho_name<-gsub(x = item,pattern = 'annotation',replacement = 'orthoList')
ortho_file<-read.csv(paste0('Annotation_files/OrthoList_files/',ortho_name))
#Rename columns for clarity
colnames(annot_file)<-c('WB_ID','Annot_cluster','Annot_SYMBOLS','Annot_GENENAME')
colnames(ortho_file)<-c('WB_ID','Ortho_Common_Name','Ortho_Locus_ID','Ortho_Ensembl_ID',
'Ortho_HGNC_Symbol','Ortho_No_of_Databases','Ortho_Matched_Databases',
'Ortho_Ahringer_location','rem')
#Remove unecessary columns from ortho file
ortho_file<-ortho_file[,c('WB_ID','Ortho_Common_Name','Ortho_Locus_ID','Ortho_Ensembl_ID',
'Ortho_HGNC_Symbol','Ortho_No_of_Databases','Ortho_Matched_Databases',
'Ortho_Ahringer_location')]
merged_file<-merge(annot_file,ortho_file,by='WB_ID')
final_name<-gsub(x = item,pattern = 'annotation',replacement = 'annot_ortho')
write.csv(x = merged_file,file = final_name)
break
}
View()
write.csv(x = merged_file,file = final_name,row.names = F)
setwd('~/A_Projects/EpiGen/R_Work_Folder/TiSA_results/result_not_example/AkerBioMarine_request/')
for(item in list.files('Annotation_files/')){
if(item=="OrthoList_files"){
next
}
annot_file<-read.csv(paste0('Annotation_files/',item))
ortho_name<-gsub(x = item,pattern = 'annotation',replacement = 'orthoList')
ortho_file<-read.csv(paste0('Annotation_files/OrthoList_files/',ortho_name))
#Rename columns for clarity
colnames(annot_file)<-c('WB_ID','Annot_cluster','Annot_SYMBOLS','Annot_GENENAME')
colnames(ortho_file)<-c('WB_ID','Ortho_Common_Name','Ortho_Locus_ID','Ortho_Ensembl_ID',
'Ortho_HGNC_Symbol','Ortho_No_of_Databases','Ortho_Matched_Databases',
'Ortho_Ahringer_location','rem')
#Remove unecessary columns from ortho file
ortho_file<-ortho_file[,c('WB_ID','Ortho_Common_Name','Ortho_Locus_ID','Ortho_Ensembl_ID',
'Ortho_HGNC_Symbol','Ortho_No_of_Databases','Ortho_Matched_Databases',
'Ortho_Ahringer_location')]
merged_file<-merge(annot_file,ortho_file,by='WB_ID')
final_name<-gsub(x = item,pattern = 'annotation',replacement = 'annot_ortho')
write.csv(x = merged_file,file = final_name,row.names = F)
}
setwd('~/A_Projects/BiGR/CC_vel/')
library(limma)
library(TCGAbiolinks)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
query <- GDCquery(
project = "TCGA-GBM",
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
barcode = c("TCGA-14-0736-02A-01R-2005-01", "TCGA-06-0211-02A-02R-2005-01"),
legacy = TRUE
)
GDCdownload(
query = query,
method = "api",
files.per.chunk = 10
)
data <- GDCprepare(query = query)
data
assays(data)
library(SummarizedExperiment)
assays(data)
assays(data)$normalized_count
View(assays(data)$normalized_count)
library(limma)
library(TCGAbiolinks)
library(SummarizedExperiment)
query <- GDCquery(
project = "TCGA-GBM",
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
# barcode = c("TCGA-14-0736-02A-01R-2005-01", "TCGA-06-0211-02A-02R-2005-01"),
legacy = TRUE
)
GDCdownload(
query = query,
method = "api",
files.per.chunk = 10
)
data <- GDCprepare(query = query)
BiocManager::install("maftools")
BiocManager::install("ggtree")
version
version()
R.version()
R.version
