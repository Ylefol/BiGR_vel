cc.top2 <- unique(na.omit(unlist(lapply(go.results.comb.rea, function(list) lapply(lapply(list[phases], function(x) x[x$term_name %in% cc.r2, ]), GetTopTerms, 10)))))
top2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetTopTerms, 10))))
save_name_CC<-"REAC_CC_peak_exp_10"
save_name_all<-"REAC_peak_exp_10"
save_name_file<-"gene_info"
if(i==2){
save_name_CC<-paste0(save_name_CC,'_significant')
save_name_all<-paste0(save_name_all,'_significant')
save_name_file<-paste0(save_name_file,'_significant')
}
ggsave(paste0(name,save_name_CC,".pdf"), PlotTerms(go.results.comb.rea, na.omit(cc.top2), MeltProfiler2), width=14, height=15)
ggsave(paste0(name,save_name_all,".pdf"), PlotTerms(go.results.comb.rea, na.omit(top2), MeltProfiler2), width=14, height=15)
#Create excel with data used
write.xlsx(HaCaT_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'HaCaT', append = F, row.names=F)
write.xlsx(c293T_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'c293T', append = T, row.names=F)
write.xlsx(Jurkat_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'Jurkat', append = T, row.names=F)
}
}
View(go.results.comb)
setwd("~/A_Projects/BiGR/CC_vel")
library("reshape2")
library("ggplot2")
library("gplots")
#library("gProfileR")
library("gprofiler2")
library("ggrepel")
library("stringr")
library("ReactomeContentService4R")
library("xlsx")
source('R_scripts/CC_vel_R_functions.R')
#Create list of ranges and names for analysis
#First value is delay category to use, second is upper threshold, third is lower threshold
#Name of each range will be the name given to the folder
#Each range will be done with and without significant genes, naming will automatically
#be adjusted for this.
delay_range_lst<-list('inc_to_1-50_to_500'=c('inc_to_.1',500,50),
'inc_to_1-1_to_500'=c('inc_to_.1',500,1),
'inc_to_1--1_to_-500'=c('inc_to_.1',-1,-500),
'inc_to_1--50_to_-500'=c('inc_to_.1',-50,-500),
'dec_to_0-50_to_500'=c('dec_to_0',500,50),
'dec_to_0-1_to_500'=c('dec_to_0',500,1),
'dec_to_0--1_to_-500'=c('dec_to_0',-1,-500),
'dec_to_0--50_to_-500'=c('dec_to_0',-50,-500))
#Characterize files using both cell cycle REAC and general REAC for all three phases
cellcycle.rea <- getParticipants("R-HSA-1640170", retrieval = "EventsInPathways")
cellcycle.ids <- c("R-HSA-1640170", cellcycle.rea$stId)
phases <- c("G1", "S", "G2M")
#Open initial files
## Get genes
HaCaT_main <- read.table("data_files/data_results/delay_genes/HaCat/A_B_delay_genes.csv", header=T, sep=",")
c293T_main <- read.table("data_files/data_results/delay_genes/293t/A_B_C_D_delay_genes.csv", header=T, sep=",")
Jurkat_main <- read.table("data_files/data_results/delay_genes/jurkat/A_B_C_D_delay_genes.csv", header=T, sep=",")
#Add phase peak exp to files, remove non-rankable genes
HaCat_phase_info<-read.table("data_files/data_results/rank/HaCat/A_B_t_test_results.csv", header=T, sep=",")
HaCaT_main<-merge(HaCaT_main,HaCat_phase_info,by='gene_name')
c293T_phase_info<-na.omit(read.table("data_files/data_results/rank/293t/A_B_C_D_t_test_results.csv", header=T, sep=","))
c293T_main<-merge(c293T_main,c293T_phase_info,by='gene_name')
Jurkat_phase_info<-na.omit(read.table("data_files/data_results/rank/jurkat/A_B_C_D_t_test_results.csv", header=T, sep=","))
Jurkat_main<-merge(Jurkat_main,Jurkat_phase_info,by='gene_name')
#Perform iteration over delay ranges
for(exp_name in names(delay_range_lst)){
name<-paste0('delay_characterization/',exp_name,'/')
dir.create(name)
delay_cat<-delay_range_lst[[exp_name]][1]
delay_threshold_upper<-as.integer(delay_range_lst[[exp_name]][2])
delay_threshold_lower<-as.integer(delay_range_lst[[exp_name]][3])
#Filter for threshold
HaCaT<-HaCaT_main[HaCaT_main[[delay_cat]]>=delay_threshold_lower & HaCaT_main[[delay_cat]]<=delay_threshold_upper,]
c293T<-c293T_main[c293T_main[[delay_cat]]>=delay_threshold_lower & c293T_main[[delay_cat]]<=delay_threshold_upper,]
Jurkat<-Jurkat_main[Jurkat_main[[delay_cat]]>=delay_threshold_lower & Jurkat_main[[delay_cat]]<=delay_threshold_upper,]
#Loop for creation of significant and non-significant versions
for(i in 1:2){
if(i==2){
HaCaT_sub<-na.omit(HaCaT[HaCaT$padjusted<0.01,])
c293T_sub<-na.omit(c293T[c293T$padjusted<0.01,])
Jurkat_sub<-na.omit(Jurkat[Jurkat$padjusted<0.01,])
}else{
HaCaT_sub<-HaCaT
c293T_sub<-c293T
Jurkat_sub<-Jurkat
}
go.results.comb <-
lapply(list(HaCaT=HaCaT_sub, "293T"=c293T_sub, Jurkat=Jurkat_sub),
function(cell) sapply(unique(na.omit(cell$phase_peak_exp)), function(x) runProfiler2(as.character(cell$gene_name[cell$phase_peak_exp %in% x]), x, 0.05), simplify=F))
#Remove NULL elements
# go.results.comb <- lapply(go.results.comb, function(x) x[lengths(x) > 0])
go.results.comb.rea <- lapply(go.results.comb, function(res) lapply(res, function(x) {x<-x[x$source %in% "REAC",]; x[order(x$p_value),]}))
cc.r2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetCCReactome))))
cc.top2 <- unique(na.omit(unlist(lapply(go.results.comb.rea, function(list) lapply(lapply(list[phases], function(x) x[x$term_name %in% cc.r2, ]), GetTopTerms, 10)))))
top2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetTopTerms, 10))))
save_name_CC<-"REAC_CC_peak_exp_10"
save_name_all<-"REAC_peak_exp_10"
save_name_file<-"gene_info"
if(i==2){
save_name_CC<-paste0(save_name_CC,'_significant')
save_name_all<-paste0(save_name_all,'_significant')
save_name_file<-paste0(save_name_file,'_significant')
}
ggsave(paste0(name,save_name_CC,".pdf"), PlotTerms(go.results.comb.rea, na.omit(cc.top2), MeltProfiler2), width=14, height=15)
ggsave(paste0(name,save_name_all,".pdf"), PlotTerms(go.results.comb.rea, na.omit(top2), MeltProfiler2), width=14, height=15)
#Create excel with data used
write.xlsx(HaCaT_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'HaCaT', append = F, row.names=F)
write.xlsx(c293T_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'c293T', append = T, row.names=F)
write.xlsx(Jurkat_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'Jurkat', append = T, row.names=F)
}
}
exp_name
go.results.comb.rea <- lapply(go.results.comb, function(res) lapply(res, function(x) {x<-x[x$source %in% "REAC",]; x[order(x$p_value),]}))
View(go.results.comb)
source('R_scripts/CC_vel_R_functions.R')
go.results.comb <-
lapply(list(HaCaT=HaCaT_sub, "293T"=c293T_sub, Jurkat=Jurkat_sub),
function(cell) sapply(unique(na.omit(cell$phase_peak_exp)), function(x) runProfiler2(as.character(cell$gene_name[cell$phase_peak_exp %in% x]), x, 0.05), simplify=F))
go.result.comb
go.results.comb$HaCaT$G1
source('R_scripts/CC_vel_R_functions.R')
go.results.comb <-
lapply(list(HaCaT=HaCaT_sub, "293T"=c293T_sub, Jurkat=Jurkat_sub),
function(cell) sapply(unique(na.omit(cell$phase_peak_exp)), function(x) runProfiler2(as.character(cell$gene_name[cell$phase_peak_exp %in% x]), x, 0.05), simplify=F))
go.results.comb.rea <- lapply(go.results.comb, function(res) lapply(res, function(x) {x<-x[x$source %in% "REAC",]; x[order(x$p_value),]}))
cc.r2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetCCReactome))))
cc.top2 <- unique(na.omit(unlist(lapply(go.results.comb.rea, function(list) lapply(lapply(list[phases], function(x) x[x$term_name %in% cc.r2, ]), GetTopTerms, 10)))))
top2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetTopTerms, 10))))
save_name_CC<-"REAC_CC_peak_exp_10"
save_name_all<-"REAC_peak_exp_10"
save_name_file<-"gene_info"
if(i==2){
save_name_CC<-paste0(save_name_CC,'_significant')
save_name_all<-paste0(save_name_all,'_significant')
save_name_file<-paste0(save_name_file,'_significant')
}
ggsave(paste0(name,save_name_CC,".pdf"), PlotTerms(go.results.comb.rea, na.omit(cc.top2), MeltProfiler2), width=14, height=15)
ggsave(paste0(name,save_name_all,".pdf"), PlotTerms(go.results.comb.rea, na.omit(top2), MeltProfiler2), width=14, height=15)
#Create excel with data used
write.xlsx(HaCaT_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'HaCaT', append = F, row.names=F)
write.xlsx(c293T_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'c293T', append = T, row.names=F)
write.xlsx(Jurkat_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'Jurkat', append = T, row.names=F)
setwd("~/A_Projects/BiGR/CC_vel")
library("reshape2")
library("ggplot2")
library("gplots")
#library("gProfileR")
library("gprofiler2")
library("ggrepel")
library("stringr")
library("ReactomeContentService4R")
library("xlsx")
source('R_scripts/CC_vel_R_functions.R')
#Create list of ranges and names for analysis
#First value is delay category to use, second is upper threshold, third is lower threshold
#Name of each range will be the name given to the folder
#Each range will be done with and without significant genes, naming will automatically
#be adjusted for this.
delay_range_lst<-list('inc_to_1-50_to_500'=c('inc_to_.1',500,50),
'inc_to_1-1_to_500'=c('inc_to_.1',500,1),
'inc_to_1--1_to_-500'=c('inc_to_.1',-1,-500),
'inc_to_1--50_to_-500'=c('inc_to_.1',-50,-500),
'dec_to_0-50_to_500'=c('dec_to_0',500,50),
'dec_to_0-1_to_500'=c('dec_to_0',500,1),
'dec_to_0--1_to_-500'=c('dec_to_0',-1,-500),
'dec_to_0--50_to_-500'=c('dec_to_0',-50,-500))
#Characterize files using both cell cycle REAC and general REAC for all three phases
cellcycle.rea <- getParticipants("R-HSA-1640170", retrieval = "EventsInPathways")
cellcycle.ids <- c("R-HSA-1640170", cellcycle.rea$stId)
phases <- c("G1", "S", "G2M")
#Open initial files
## Get genes
HaCaT_main <- read.table("data_files/data_results/delay_genes/HaCat/A_B_delay_genes.csv", header=T, sep=",")
c293T_main <- read.table("data_files/data_results/delay_genes/293t/A_B_C_D_delay_genes.csv", header=T, sep=",")
Jurkat_main <- read.table("data_files/data_results/delay_genes/jurkat/A_B_C_D_delay_genes.csv", header=T, sep=",")
#Add phase peak exp to files, remove non-rankable genes
HaCat_phase_info<-read.table("data_files/data_results/rank/HaCat/A_B_t_test_results.csv", header=T, sep=",")
HaCaT_main<-merge(HaCaT_main,HaCat_phase_info,by='gene_name')
c293T_phase_info<-na.omit(read.table("data_files/data_results/rank/293t/A_B_C_D_t_test_results.csv", header=T, sep=","))
c293T_main<-merge(c293T_main,c293T_phase_info,by='gene_name')
Jurkat_phase_info<-na.omit(read.table("data_files/data_results/rank/jurkat/A_B_C_D_t_test_results.csv", header=T, sep=","))
Jurkat_main<-merge(Jurkat_main,Jurkat_phase_info,by='gene_name')
#Perform iteration over delay ranges
for(exp_name in names(delay_range_lst)){
name<-paste0('delay_characterization/',exp_name,'/')
dir.create(name)
delay_cat<-delay_range_lst[[exp_name]][1]
delay_threshold_upper<-as.integer(delay_range_lst[[exp_name]][2])
delay_threshold_lower<-as.integer(delay_range_lst[[exp_name]][3])
#Filter for threshold
HaCaT<-HaCaT_main[HaCaT_main[[delay_cat]]>=delay_threshold_lower & HaCaT_main[[delay_cat]]<=delay_threshold_upper,]
c293T<-c293T_main[c293T_main[[delay_cat]]>=delay_threshold_lower & c293T_main[[delay_cat]]<=delay_threshold_upper,]
Jurkat<-Jurkat_main[Jurkat_main[[delay_cat]]>=delay_threshold_lower & Jurkat_main[[delay_cat]]<=delay_threshold_upper,]
#Loop for creation of significant and non-significant versions
for(i in 1:2){
if(i==2){
HaCaT_sub<-na.omit(HaCaT[HaCaT$padjusted<0.01,])
c293T_sub<-na.omit(c293T[c293T$padjusted<0.01,])
Jurkat_sub<-na.omit(Jurkat[Jurkat$padjusted<0.01,])
}else{
HaCaT_sub<-HaCaT
c293T_sub<-c293T
Jurkat_sub<-Jurkat
}
go.results.comb <-
lapply(list(HaCaT=HaCaT_sub, "293T"=c293T_sub, Jurkat=Jurkat_sub),
function(cell) sapply(unique(na.omit(cell$phase_peak_exp)), function(x) runProfiler2(as.character(cell$gene_name[cell$phase_peak_exp %in% x]), x, 0.05), simplify=F))
#Remove NULL elements
# go.results.comb <- lapply(go.results.comb, function(x) x[lengths(x) > 0])
go.results.comb.rea <- lapply(go.results.comb, function(res) lapply(res, function(x) {x<-x[x$source %in% "REAC",]; x[order(x$p_value),]}))
cc.r2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetCCReactome))))
cc.top2 <- unique(na.omit(unlist(lapply(go.results.comb.rea, function(list) lapply(lapply(list[phases], function(x) x[x$term_name %in% cc.r2, ]), GetTopTerms, 10)))))
top2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetTopTerms, 10))))
save_name_CC<-"REAC_CC_peak_exp_10"
save_name_all<-"REAC_peak_exp_10"
save_name_file<-"gene_info"
if(i==2){
save_name_CC<-paste0(save_name_CC,'_significant')
save_name_all<-paste0(save_name_all,'_significant')
save_name_file<-paste0(save_name_file,'_significant')
}
ggsave(paste0(name,save_name_CC,".pdf"), PlotTerms(go.results.comb.rea, na.omit(cc.top2), MeltProfiler2), width=14, height=15)
ggsave(paste0(name,save_name_all,".pdf"), PlotTerms(go.results.comb.rea, na.omit(top2), MeltProfiler2), width=14, height=15)
#Create excel with data used
write.xlsx(HaCaT_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'HaCaT', append = F, row.names=F)
write.xlsx(c293T_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'c293T', append = T, row.names=F)
write.xlsx(Jurkat_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'Jurkat', append = T, row.names=F)
}
}
setwd("~/A_Projects/BiGR/CC_vel")
library("reshape2")
library("ggplot2")
library("gplots")
#library("gProfileR")
library("gprofiler2")
library("ggrepel")
library("stringr")
library("ReactomeContentService4R")
library("xlsx")
source('R_scripts/CC_vel_R_functions.R')
#Create list of ranges and names for analysis
#First value is delay category to use, second is upper threshold, third is lower threshold
#Name of each range will be the name given to the folder
#Each range will be done with and without significant genes, naming will automatically
#be adjusted for this.
delay_range_lst<-list('inc_to_1-50_to_500'=c('inc_to_.1',500,50),
'inc_to_1-1_to_500'=c('inc_to_.1',500,1),
'inc_to_1--1_to_-500'=c('inc_to_.1',-1,-500),
'inc_to_1--50_to_-500'=c('inc_to_.1',-50,-500),
'dec_to_0-50_to_500'=c('dec_to_0',500,50),
'dec_to_0-1_to_500'=c('dec_to_0',500,1),
'dec_to_0--1_to_-500'=c('dec_to_0',-1,-500),
'dec_to_0--50_to_-500'=c('dec_to_0',-50,-500))
delay_range_lst<-list('inc_to_1-0_to_0'=c('inc_to_.1',0,0),
'dec_to_1-0_to_0'=c('dec_to_0',0,0))
#Characterize files using both cell cycle REAC and general REAC for all three phases
cellcycle.rea <- getParticipants("R-HSA-1640170", retrieval = "EventsInPathways")
cellcycle.ids <- c("R-HSA-1640170", cellcycle.rea$stId)
phases <- c("G1", "S", "G2M")
#Open initial files
## Get genes
HaCaT_main <- read.table("data_files/data_results/delay_genes/HaCat/A_B_delay_genes.csv", header=T, sep=",")
c293T_main <- read.table("data_files/data_results/delay_genes/293t/A_B_C_D_delay_genes.csv", header=T, sep=",")
Jurkat_main <- read.table("data_files/data_results/delay_genes/jurkat/A_B_C_D_delay_genes.csv", header=T, sep=",")
#Add phase peak exp to files, remove non-rankable genes
HaCat_phase_info<-read.table("data_files/data_results/rank/HaCat/A_B_t_test_results.csv", header=T, sep=",")
HaCaT_main<-merge(HaCaT_main,HaCat_phase_info,by='gene_name')
c293T_phase_info<-na.omit(read.table("data_files/data_results/rank/293t/A_B_C_D_t_test_results.csv", header=T, sep=","))
c293T_main<-merge(c293T_main,c293T_phase_info,by='gene_name')
Jurkat_phase_info<-na.omit(read.table("data_files/data_results/rank/jurkat/A_B_C_D_t_test_results.csv", header=T, sep=","))
Jurkat_main<-merge(Jurkat_main,Jurkat_phase_info,by='gene_name')
#Perform iteration over delay ranges
for(exp_name in names(delay_range_lst)){
name<-paste0('delay_characterization/',exp_name,'/')
dir.create(name)
delay_cat<-delay_range_lst[[exp_name]][1]
delay_threshold_upper<-as.integer(delay_range_lst[[exp_name]][2])
delay_threshold_lower<-as.integer(delay_range_lst[[exp_name]][3])
#Filter for threshold
HaCaT<-HaCaT_main[HaCaT_main[[delay_cat]]>=delay_threshold_lower & HaCaT_main[[delay_cat]]<=delay_threshold_upper,]
c293T<-c293T_main[c293T_main[[delay_cat]]>=delay_threshold_lower & c293T_main[[delay_cat]]<=delay_threshold_upper,]
Jurkat<-Jurkat_main[Jurkat_main[[delay_cat]]>=delay_threshold_lower & Jurkat_main[[delay_cat]]<=delay_threshold_upper,]
#Loop for creation of significant and non-significant versions
for(i in 1:2){
if(i==2){
HaCaT_sub<-na.omit(HaCaT[HaCaT$padjusted<0.01,])
c293T_sub<-na.omit(c293T[c293T$padjusted<0.01,])
Jurkat_sub<-na.omit(Jurkat[Jurkat$padjusted<0.01,])
}else{
HaCaT_sub<-HaCaT
c293T_sub<-c293T
Jurkat_sub<-Jurkat
}
go.results.comb <-
lapply(list(HaCaT=HaCaT_sub, "293T"=c293T_sub, Jurkat=Jurkat_sub),
function(cell) sapply(unique(na.omit(cell$phase_peak_exp)), function(x) runProfiler2(as.character(cell$gene_name[cell$phase_peak_exp %in% x]), x, 0.05), simplify=F))
#Remove NULL elements
# go.results.comb <- lapply(go.results.comb, function(x) x[lengths(x) > 0])
go.results.comb.rea <- lapply(go.results.comb, function(res) lapply(res, function(x) {x<-x[x$source %in% "REAC",]; x[order(x$p_value),]}))
cc.r2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetCCReactome))))
cc.top2 <- unique(na.omit(unlist(lapply(go.results.comb.rea, function(list) lapply(lapply(list[phases], function(x) x[x$term_name %in% cc.r2, ]), GetTopTerms, 10)))))
top2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetTopTerms, 10))))
save_name_CC<-"REAC_CC_peak_exp_10"
save_name_all<-"REAC_peak_exp_10"
save_name_file<-"gene_info"
if(i==2){
save_name_CC<-paste0(save_name_CC,'_significant')
save_name_all<-paste0(save_name_all,'_significant')
save_name_file<-paste0(save_name_file,'_significant')
}
ggsave(paste0(name,save_name_CC,".pdf"), PlotTerms(go.results.comb.rea, na.omit(cc.top2), MeltProfiler2), width=14, height=15)
ggsave(paste0(name,save_name_all,".pdf"), PlotTerms(go.results.comb.rea, na.omit(top2), MeltProfiler2), width=14, height=15)
#Create excel with data used
write.xlsx(HaCaT_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'HaCaT', append = F, row.names=F)
write.xlsx(c293T_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'c293T', append = T, row.names=F)
write.xlsx(Jurkat_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'Jurkat', append = T, row.names=F)
}
}
setwd("~/A_Projects/BiGR/CC_vel")
library("reshape2")
library("ggplot2")
library("gplots")
#library("gProfileR")
library("gprofiler2")
library("ggrepel")
library("stringr")
library("ReactomeContentService4R")
library("xlsx")
source('R_scripts/CC_vel_R_functions.R')
#Create list of ranges and names for analysis
#First value is delay category to use, second is upper threshold, third is lower threshold
#Name of each range will be the name given to the folder
#Each range will be done with and without significant genes, naming will automatically
#be adjusted for this.
delay_range_lst<-list('inc_to_1-50_to_500'=c('inc_to_.1',500,51),
'inc_to_1-1_to_500'=c('inc_to_.1',50,1),
'inc_to_1--1_to_-500'=c('inc_to_.1',-1,-50),
'inc_to_1--50_to_-500'=c('inc_to_.1',-51,-500),
'dec_to_0-50_to_500'=c('dec_to_0',500,51),
'dec_to_0-1_to_500'=c('dec_to_0',50,1),
'dec_to_0--1_to_-500'=c('dec_to_0',-1,-50),
'dec_to_0--50_to_-500'=c('dec_to_0',-51,-500),
'inc_to_1-0_to_0'=c('inc_to_.1',0,0),
'dec_to_1-0_to_0'=c('dec_to_0',0,0))
#Characterize files using both cell cycle REAC and general REAC for all three phases
cellcycle.rea <- getParticipants("R-HSA-1640170", retrieval = "EventsInPathways")
cellcycle.ids <- c("R-HSA-1640170", cellcycle.rea$stId)
phases <- c("G1", "S", "G2M")
#Open initial files
## Get genes
HaCaT_main <- read.table("data_files/data_results/delay_genes/HaCat/A_B_delay_genes.csv", header=T, sep=",")
c293T_main <- read.table("data_files/data_results/delay_genes/293t/A_B_C_D_delay_genes.csv", header=T, sep=",")
Jurkat_main <- read.table("data_files/data_results/delay_genes/jurkat/A_B_C_D_delay_genes.csv", header=T, sep=",")
#Add phase peak exp to files, remove non-rankable genes
HaCat_phase_info<-read.table("data_files/data_results/rank/HaCat/A_B_t_test_results.csv", header=T, sep=",")
HaCaT_main<-merge(HaCaT_main,HaCat_phase_info,by='gene_name')
c293T_phase_info<-na.omit(read.table("data_files/data_results/rank/293t/A_B_C_D_t_test_results.csv", header=T, sep=","))
c293T_main<-merge(c293T_main,c293T_phase_info,by='gene_name')
Jurkat_phase_info<-na.omit(read.table("data_files/data_results/rank/jurkat/A_B_C_D_t_test_results.csv", header=T, sep=","))
Jurkat_main<-merge(Jurkat_main,Jurkat_phase_info,by='gene_name')
#Perform iteration over delay ranges
for(exp_name in names(delay_range_lst)){
name<-paste0('delay_characterization/',exp_name,'/')
dir.create(name)
delay_cat<-delay_range_lst[[exp_name]][1]
delay_threshold_upper<-as.integer(delay_range_lst[[exp_name]][2])
delay_threshold_lower<-as.integer(delay_range_lst[[exp_name]][3])
#Filter for threshold
HaCaT<-HaCaT_main[HaCaT_main[[delay_cat]]>=delay_threshold_lower & HaCaT_main[[delay_cat]]<=delay_threshold_upper,]
c293T<-c293T_main[c293T_main[[delay_cat]]>=delay_threshold_lower & c293T_main[[delay_cat]]<=delay_threshold_upper,]
Jurkat<-Jurkat_main[Jurkat_main[[delay_cat]]>=delay_threshold_lower & Jurkat_main[[delay_cat]]<=delay_threshold_upper,]
#Loop for creation of significant and non-significant versions
for(i in 1:2){
if(i==2){
HaCaT_sub<-na.omit(HaCaT[HaCaT$padjusted<0.01,])
c293T_sub<-na.omit(c293T[c293T$padjusted<0.01,])
Jurkat_sub<-na.omit(Jurkat[Jurkat$padjusted<0.01,])
}else{
HaCaT_sub<-HaCaT
c293T_sub<-c293T
Jurkat_sub<-Jurkat
}
go.results.comb <-
lapply(list(HaCaT=HaCaT_sub, "293T"=c293T_sub, Jurkat=Jurkat_sub),
function(cell) sapply(unique(na.omit(cell$phase_peak_exp)), function(x) runProfiler2(as.character(cell$gene_name[cell$phase_peak_exp %in% x]), x, 0.05), simplify=F))
#Remove NULL elements
# go.results.comb <- lapply(go.results.comb, function(x) x[lengths(x) > 0])
go.results.comb.rea <- lapply(go.results.comb, function(res) lapply(res, function(x) {x<-x[x$source %in% "REAC",]; x[order(x$p_value),]}))
cc.r2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetCCReactome))))
cc.top2 <- unique(na.omit(unlist(lapply(go.results.comb.rea, function(list) lapply(lapply(list[phases], function(x) x[x$term_name %in% cc.r2, ]), GetTopTerms, 10)))))
top2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetTopTerms, 10))))
save_name_CC<-"REAC_CC_peak_exp_10"
save_name_all<-"REAC_peak_exp_10"
save_name_file<-"gene_info"
if(i==2){
save_name_CC<-paste0(save_name_CC,'_significant')
save_name_all<-paste0(save_name_all,'_significant')
save_name_file<-paste0(save_name_file,'_significant')
}
ggsave(paste0(name,save_name_CC,".pdf"), PlotTerms(go.results.comb.rea, na.omit(cc.top2), MeltProfiler2), width=14, height=15)
ggsave(paste0(name,save_name_all,".pdf"), PlotTerms(go.results.comb.rea, na.omit(top2), MeltProfiler2), width=14, height=15)
#Create excel with data used
write.xlsx(HaCaT_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'HaCaT', append = F, row.names=F)
write.xlsx(c293T_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'c293T', append = T, row.names=F)
write.xlsx(Jurkat_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'Jurkat', append = T, row.names=F)
}
}
setwd("~/A_Projects/BiGR/CC_vel")
library("reshape2")
library("ggplot2")
library("gplots")
#library("gProfileR")
library("gprofiler2")
library("ggrepel")
library("stringr")
library("ReactomeContentService4R")
library("xlsx")
source('R_scripts/CC_vel_R_functions.R')
#Create list of ranges and names for analysis
#First value is delay category to use, second is upper threshold, third is lower threshold
#Name of each range will be the name given to the folder
#Each range will be done with and without significant genes, naming will automatically
#be adjusted for this.
delay_range_lst<-list('inc_to_1-51_to_500'=c('inc_to_.1',500,51),
'inc_to_1-1_to_50'=c('inc_to_.1',50,1),
'inc_to_1--1_to_-50'=c('inc_to_.1',-1,-50),
'inc_to_1--51_to_-500'=c('inc_to_.1',-51,-500),
'dec_to_0-51_to_500'=c('dec_to_0',500,51),
'dec_to_0-1_to_50'=c('dec_to_0',50,1),
'dec_to_0--1_to_-50'=c('dec_to_0',-1,-50),
'dec_to_0--51_to_-500'=c('dec_to_0',-51,-500),
'inc_to_1-0_to_0'=c('inc_to_.1',0,0),
'dec_to_1-0_to_0'=c('dec_to_0',0,0))
#Characterize files using both cell cycle REAC and general REAC for all three phases
cellcycle.rea <- getParticipants("R-HSA-1640170", retrieval = "EventsInPathways")
cellcycle.ids <- c("R-HSA-1640170", cellcycle.rea$stId)
phases <- c("G1", "S", "G2M")
#Open initial files
## Get genes
HaCaT_main <- read.table("data_files/data_results/delay_genes/HaCat/A_B_delay_genes.csv", header=T, sep=",")
c293T_main <- read.table("data_files/data_results/delay_genes/293t/A_B_C_D_delay_genes.csv", header=T, sep=",")
Jurkat_main <- read.table("data_files/data_results/delay_genes/jurkat/A_B_C_D_delay_genes.csv", header=T, sep=",")
#Add phase peak exp to files, remove non-rankable genes
HaCat_phase_info<-read.table("data_files/data_results/rank/HaCat/A_B_t_test_results.csv", header=T, sep=",")
HaCaT_main<-merge(HaCaT_main,HaCat_phase_info,by='gene_name')
c293T_phase_info<-na.omit(read.table("data_files/data_results/rank/293t/A_B_C_D_t_test_results.csv", header=T, sep=","))
c293T_main<-merge(c293T_main,c293T_phase_info,by='gene_name')
Jurkat_phase_info<-na.omit(read.table("data_files/data_results/rank/jurkat/A_B_C_D_t_test_results.csv", header=T, sep=","))
Jurkat_main<-merge(Jurkat_main,Jurkat_phase_info,by='gene_name')
#Perform iteration over delay ranges
for(exp_name in names(delay_range_lst)){
name<-paste0('delay_characterization/',exp_name,'/')
dir.create(name)
delay_cat<-delay_range_lst[[exp_name]][1]
delay_threshold_upper<-as.integer(delay_range_lst[[exp_name]][2])
delay_threshold_lower<-as.integer(delay_range_lst[[exp_name]][3])
#Filter for threshold
HaCaT<-HaCaT_main[HaCaT_main[[delay_cat]]>=delay_threshold_lower & HaCaT_main[[delay_cat]]<=delay_threshold_upper,]
c293T<-c293T_main[c293T_main[[delay_cat]]>=delay_threshold_lower & c293T_main[[delay_cat]]<=delay_threshold_upper,]
Jurkat<-Jurkat_main[Jurkat_main[[delay_cat]]>=delay_threshold_lower & Jurkat_main[[delay_cat]]<=delay_threshold_upper,]
#Loop for creation of significant and non-significant versions
for(i in 1:2){
if(i==2){
HaCaT_sub<-na.omit(HaCaT[HaCaT$padjusted<0.01,])
c293T_sub<-na.omit(c293T[c293T$padjusted<0.01,])
Jurkat_sub<-na.omit(Jurkat[Jurkat$padjusted<0.01,])
}else{
HaCaT_sub<-HaCaT
c293T_sub<-c293T
Jurkat_sub<-Jurkat
}
go.results.comb <-
lapply(list(HaCaT=HaCaT_sub, "293T"=c293T_sub, Jurkat=Jurkat_sub),
function(cell) sapply(unique(na.omit(cell$phase_peak_exp)), function(x) runProfiler2(as.character(cell$gene_name[cell$phase_peak_exp %in% x]), x, 0.05), simplify=F))
#Remove NULL elements
# go.results.comb <- lapply(go.results.comb, function(x) x[lengths(x) > 0])
go.results.comb.rea <- lapply(go.results.comb, function(res) lapply(res, function(x) {x<-x[x$source %in% "REAC",]; x[order(x$p_value),]}))
cc.r2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetCCReactome))))
cc.top2 <- unique(na.omit(unlist(lapply(go.results.comb.rea, function(list) lapply(lapply(list[phases], function(x) x[x$term_name %in% cc.r2, ]), GetTopTerms, 10)))))
top2 <- unique(unlist(lapply(go.results.comb.rea, function(x) lapply(x, GetTopTerms, 10))))
save_name_CC<-"REAC_CC_peak_exp_10"
save_name_all<-"REAC_peak_exp_10"
save_name_file<-"gene_info"
if(i==2){
save_name_CC<-paste0(save_name_CC,'_significant')
save_name_all<-paste0(save_name_all,'_significant')
save_name_file<-paste0(save_name_file,'_significant')
}
ggsave(paste0(name,save_name_CC,".pdf"), PlotTerms(go.results.comb.rea, na.omit(cc.top2), MeltProfiler2), width=14, height=15)
ggsave(paste0(name,save_name_all,".pdf"), PlotTerms(go.results.comb.rea, na.omit(top2), MeltProfiler2), width=14, height=15)
#Create excel with data used
write.xlsx(HaCaT_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'HaCaT', append = F, row.names=F)
write.xlsx(c293T_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'c293T', append = T, row.names=F)
write.xlsx(Jurkat_sub, file = paste0(name,save_name_file,".xlsx"),
sheetName = 'Jurkat', append = T, row.names=F)
}
}
